JavaScript umożliwia tworzenie dynamicznych stron internetowych.
Do tej pory używając połączenia HTML i CSS mieliśmy możliwość tworzenia ładnych, jednak, statycznych stron internetowych.
Wykorzystując Bootstrap poznaliśmy co możemy uzyskać za pomocą JavaScript. Tam używaliśmy go do rozwijanego przycisku w Navbar.
Właśnie do takich rzeczy służy JavaScript. Dodaje dynamiki do naszych stron. Przykłąd z rozwijanym menu pod przuciskiem to tylko przykład.

JavaScript możemy używać na następujące sposoby:
1. Bezpośrednio z konsoli przeglądarki internetowej. Uruchamianie konsoli dla Google Chrome: PPM > Zbadaj > Console,
2. Za pomocą plików *.js podpinanych w pliku HTML,
3. Bądź pisania skryptów bezpośrednio w kodzie HTML.

Ad. 1. Konsola przeglądarki
---------------------------

 Używając konsli w przeglądarce wszystko co napiszepmy po dwukrotnym ukośniku (//) jest traktowane jako komentarz.

 Po wpisaniu polecenia w konsoli albo zwracana jest wartość, tuż pod naszym poleceniem, albo wykonywana jest akcja z przeglądarką, np.: wyskakuje okienko informacyjne, okienko do prowadzania danych przez użytkownika itd.

 Podstawowe typy danych w JavaScript są bardzo podobne (z niewielkimi różnicami) do tych używanych w innych językach prograowania:
 1. Liczbowe (Numbers), np.: 10, 20.8, -13.77
    UWAGA ! W przeciwieństwie do innych języków programowania, np.: Python, Java itd, w JavaScript nie ma podziału na liczby całkowite, zmiennoprzecinkowe, ujemne itd.
    Po prostu są to liczby.
 2. Ciągi znaków (Strings), np.: "Hello", "10.5"
    UWAGA ! Są to po prostu ciągi znaków, zawarte między cudzysłowem. Wszysctko co jest w cudzysłowach jest Stringiem. Nawet jeżeli są to liczby. Wówczas są traktowane jako ciąg znaków a nie liczbą. Inaczej się je wówczas porównuje.
 3. Wartości logiczne (Boolean), true - prawda, false - fałsz.
 4. UWAGA ! Są jeszcze undefined oraz null.

 Podstawowe operacje na liczbach (Numbers):
 1. Dodawanie, np.: 2 + 2 = 2,
 2. Odejmowanie, np.: 5-1 = 4,
 3. Mnożenie, np.: 3*2 = 6,
 4. Dzielenie, np.: 5/4 = 1.25,
 5. Potęgowanie, np.: 2**5 = 32,
 6. Modulo (reszta z dzielenia), 5%4 = 1,

 Podstawowe operacje na ciągach znaków (Strings):
 1. Każdemu elementowi należącemu do String przypisany jest indeks, począwszy od 0 dla pierwszego znaku,
   W celu zwrucenia znaku spod konkretnego indeksu musimy po Stringu zapisany w cudzysłowiu użyć nawiasu kwadratowego i wpisać interesujący nas indeks. Wiedząc, żę pierwszy znak ma indeks = 0.
   Np. "test"[1] - zwróci - e
 2. Możemy łączyć ze sobą ciągi znaków po prostu pisząc "xxx" + "yyy", wówczas zwrócone zotanie xxxyyy,
 3. Możemy mierzyć długość ciągu znaków, pisząć po tym ciągu .length: "xxx".length, wówczas zwracana jest liczba długości ciągu. UWAGA ! Wliczane są białe znaki,
 4. W ciągach znaków możemy stosować znaki specjalne, które pomimo, że będą znajdowały się pomiędzy cudzysłowem to będą odczytywane jako coś specjalnego.
    Np.: \n - start z nowej linii, wówczas tekst napisany po tym znaku będzie od nowej linii
         \t - tabulator , wówczas tekst pisany po tym znaku będzie pisany po tabulatorze,
         \" - znak informujący konsolę, że w środku Stringu znajduje się cudzyszłów i należy go pominąć. Jeżeli byśmy tego nie użyli wówczas konsola by rozpoznała tekst do pierwszego cudzysłowia.

 Zmienne:
 Zmienne deklarujemy poprzez słówko - var - przed nazwą zmiennej, nastepnie po znaku równa - = - się wpisujemy jej wartość i na końcu średnik - ;. Nazwy zmiennych w JavaScript, jak i w innych językach programowania, nadajemy według zasady camelStyle.
 var varName = value;
 Np.: var bankAccount = 100; - do zmiennej bankAccount przypisaliśmy wartość 100. Jeżeli napiszemy w konsoli po prostu nazwę zmiennej to zwróci nam jej wartość.
 Zmienną mogą być rownież ciągni znaków (Strings).
 Np.: var name = "Tomek; - do zmiennej przypisałem tekst "Tomek"
 Możemy tworzyć kilka zmiennych. Możemy później je dodawać ze sobą za pomocą ich nazw a nie wartości.
 Możem nazw zmiennych używać w innych poleceniach, na przykłąd razem z ".length", np.: sister.length albo "alert", np.: alert(sister) itd.
 Jeżeli stworzymy zmienną, ale nie nadamy jej wartości wówczas zostanie przypisana jej wartość typu undefine, po prostu mamy zarezerwowaną nazwę i nie będzie można jej już użyć, chyba że do przypisania wartości.
 Np.: var test; - rezerwujemy sobie nazwę zmiennej
 Jeżeli stworzymy zmienną i nadamy jej wartość null wówczas oznacza to, że zmiennej przypisaliśmy wartość która będzie przez system odczytywana jako coś, ale zawsze mniejsze od czegoś innego.
 Np.: var test = null;

 Podstawowe polecenia JavaScript:
 alert("xxx") / alert(varName) - wyskakuje okienko przeglądarki z komunikatem zawartym w nawiasie,
 clear() - czyści konsolę przeglądarki,
 "xx".length / varName.length - zwraca długość ciągu znaków,
 "xxx".slice(x,y) / varName.slice(x,y) - wycinanie kawałka ciągu znaków z dłuższego tekstu, Stringu. W tym celu podajemy początek wycięcia - x - oraz koniec - y. Przy czym y nie zalicza się do nowego łańcucha znaków.
 "test"[X] / varname[x] - zwraca znak spod indeksu X dla Stringu: test,
 prompt("Enter your name") / prompt(varName) - wyskakuje okienko z pole do uzupełnienia przez użytkownika,
                                               możemy to polecenie wykorzystac, aby przypisać do zmiennej jakąś wartość podaną przez użytkownika,
                                               np.: var age = prompt("Enter your age");
                                               UWAGA ! zmienne tak zapisywane są typu String,
 console.log("xxx") - wypisywanie na konsoli tego co jest w nawiasie. Polecenie to może nie mieć sensu w momencie kiedy korzystamy do pisania kodu JavaScript z konsoli przeglądarki, ponieważ wszystkie polecenia które powodują zwracanie na konsole, są tam zwracane.
                      Jednak polecenie to ma istotne znaczenie kiedy podpinamy w kodzie HTML plik z JavaScript. Wówczas w kod jest wykonywany z zewnętrzenego pliku i dopiero kiedy użyjemy tego polecenia to wynik zostanie zwrócony w konsoli. Aby to zobaczyć musimy otworzyć konsolę przeglądarki.

Ad. 2. i 3. Pliki JS podpięte w kodzie HTML. Skrypt JS bezpośrednio w kodzie HTML
---------------------------------------------------------------------------------

Tak jak w przypadku plików CSS, tak samo pliki ze skryptamy JavaScript podpianymy w sekcji HEAD pliku HTML.
Jednak dla skryptów wykorzystujemy znacznik SCRIPT z atrybutem SRC gdzie wpisujemy względny adres naszego pliku JS (względny to znaczy, względem lokalizacji naszego pliku HTML)

Znacznik SCRIPT jest zarówno otwierający jak i zamykający.
Jeżeli piszemy skrypty w osobnym pliku JS i wskacujemy w atrybucie SRC adres do niego wówczas pomiędzy znacnzikami nic nie ma.
Natomiast, jeżeli chcemy nasze skrypty pisać w kodzie HTML, wówczas dokonujemy tego właśnie pomiędzy tymi znacznikami.

Przykład tego jak podpinać pliki zewnętrzne JS oraz pisać bezpośrednio w kodzie znajduje się w pliku "javascript_connecting.

UWAGA ! Jeżeli podpinamy plik JS bądź piszemy kod JavaScript bezpośrednio w HTML wówczas w momencie ładowania strony internetowej NA POCZĄTKU wykonywany jest kod JavaScript, a dopiero później ładowana jest treści strony wraz ze stylizowaniem CSS.
        Świadczy to nic innego, że zanim zobaczymy treść strony jest wykoywany kod JavaScript. Jeżeli umieściliśmy w JS wyświetle alertu, wówczas najpierw pojawi się ten alert a dopiero później treść strony. Alert pojawi się na tle białej, pustej strony.
